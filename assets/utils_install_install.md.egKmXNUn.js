import{u as t}from"./chunks/createElement.D0SeZVIj.js";import{o as e,c as o,R as a}from"./chunks/framework.v-2CxGd7.js";const l=a('<div class="tip custom-block"><p class="custom-block-title">仅用于<code>Vue3</code></p><p>组件注册</p></div><h2 id="withinstall" tabindex="-1">withInstall <a class="header-anchor" href="#withinstall" aria-label="Permalink to &quot;withInstall&quot;">​</a></h2><p>向组件中添加 <code>install</code> 方法，使其既可以使用 <code>app.component</code> 注册又可以使用 <code>app.use</code> 安装，且无需考虑 <code>TypeScript</code> 类型</p><div class="pure-border"><p>接收两个参数，第一个 <code>main</code>，第二个 <code>extra</code></p><table><thead><tr><th><strong>参数属性</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><code>main</code></td><td>主组件（第一个被注册的组件）</td></tr><tr><td><code>extra</code></td><td>额外组件，对象格式（会按照传入的先后顺序注册）</td></tr></tbody></table></div><div class="info custom-block"><p class="custom-block-title">提示信息</p><p>每个使用 <code>withInstall</code> 的组件都应该有个唯一 <code>name</code>，以便兼容各种场景。如果要在全局中使用，组件名需传 <code>name</code> 值</p></div><h2 id="withnoopinstall" tabindex="-1">withNoopInstall <a class="header-anchor" href="#withnoopinstall" aria-label="Permalink to &quot;withNoopInstall&quot;">​</a></h2><p>向组件中添加空的<code>install</code>方法，接收一个参数 <code>component</code> 组件</p><div class="info custom-block"><p class="custom-block-title">使用场景</p><p>不希望组件自动注册，或者想要在控制注册时机和方式时提供灵活性。例如，想要在某些条件满足时才注册组件，或者已经有了注册逻辑的其他实现方式</p></div>',8),c=[l],h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"utils/install/install.md","filePath":"utils/install/install.md","lastUpdated":1705119715000}'),s={name:"utils/install/install.md"},_=Object.assign(s,{setup(d){return t(2),(i,n)=>(e(),o("div",null,c))}});export{h as __pageData,_ as default};
